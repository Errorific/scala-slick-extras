package com.benkolera.slick.joda

import pg.PgLocalDateTime
import org.specs2.mutable._

class InstantRangeParserSpec extends Specification {
  def parse( s:String ) =
    InstantRange.toSql( PgLocalDateTime.toSql )(
      InstantRange.fromSql(
        PgLocalDateTime.fromSql
      )( s )( PgLocalDateTime.pgLocalDateTimeInstant )
  )

  "InstantRangeParser.fromSql" should {
    "parse including" in {
      parse( """["2014-01-13 00:00:00","2014-01-13 01:00:00"]""" ) must_==( """["2014-01-13 00:00:00.0","2014-01-13 01:00:00.0"]""" )
      parse( """["2014-01-13 00:00:00.0","2014-01-13 01:00:00.0"]""" ) must_==( """["2014-01-13 00:00:00.0","2014-01-13 01:00:00.0"]""" )
      parse( """["2014-01-13 00:00:00.01","2014-01-13 01:00:00.01"]""" ) must_==( """["2014-01-13 00:00:00.01","2014-01-13 01:00:00.01"]""" )
    }

    "parse excluding" in {
      parse( """("2014-01-13 00:00:00.0","2014-01-13 01:00:00.0")""" ) must_==( """("2014-01-13 00:00:00.0","2014-01-13 01:00:00.0")""" )
    }

    "parse mixture" in {
      parse( """("2014-01-13 00:00:00.0","2014-01-13 01:00:00.0"]""" ) must_==( """("2014-01-13 00:00:00.0","2014-01-13 01:00:00.0"]""" )
      parse( """["2014-01-13 00:00:00.0","2014-01-13 01:00:00.0")""" ) must_==( """["2014-01-13 00:00:00.0","2014-01-13 01:00:00.0")""" )
    }

    "parse infinity" in {
      parse( "[-infinity,infinity]" ) must_==( "[-infinity,infinity]" )
      parse( "(-infinity,infinity)" ) must_==( "(-infinity,infinity)" )
      parse( """(-infinity,"2014-01-01 00:00:00.0"]""" ) must_==( """(-infinity,"2014-01-01 00:00:00.0"]""" )
      parse( """("2014-01-01 00:00:00.0",infinity]""" ) must_==( """("2014-01-01 00:00:00.0",infinity]""" )
    }

    "parse empty bounds" in {
      parse( "(,)" ) must_==( "(,)" )
      parse( "[,)" ) must_==( "(,)" )
      parse( "(,]" ) must_==( "(,)" )
      parse( "[,]" ) must_==( "(,)" )
      parse( """["2014-01-01 00:00:00.0",]""" ) must_==( """["2014-01-01 00:00:00.0",)""" )
      parse( """["2014-01-01 00:00:00.0",)""" ) must_==( """["2014-01-01 00:00:00.0",)""" )
      parse( """[,"2014-01-01 00:00:00.0"]""" ) must_==( """(,"2014-01-01 00:00:00.0"]""" )
      parse( """(,"2014-01-01 00:00:00.0"]""" ) must_==( """(,"2014-01-01 00:00:00.0"]""" )
    }

    "parse empty" in {
      parse( "empty" ) must_==( "empty" )
      parse( """("2014-01-13 01:00:00.0","2014-01-13 01:00:00.0")""" ) must_==( "empty" )
      parse( """["2014-01-13 01:00:00.0","2014-01-13 01:00:00.0")""" ) must_==( "empty" )
      parse( """("2014-01-13 01:00:00.0","2014-01-13 01:00:00.0"]""" ) must_==( "empty" )
      parse( """["2014-01-13 01:00:00.0","2014-01-13 01:00:00.0"]""" ) must_==( """["2014-01-13 01:00:00.0","2014-01-13 01:00:00.0"]""" )
    }

    "ignore timezone" in {
      parse( """("2014-01-13 00:00:00+10","2014-01-13 01:00:00+10")""" ) must_==( """("2014-01-13 00:00:00.0","2014-01-13 01:00:00.0")""" )
      parse( """("2014-01-13 00:00:00.5+10","2014-01-13 01:00:00.6+10")""" ) must_==( """("2014-01-13 00:00:00.5","2014-01-13 01:00:00.6")""" )
      parse( """("2014-01-13 00:00:00-10","2014-01-13 01:00:00-10")""" ) must_==( """("2014-01-13 00:00:00.0","2014-01-13 01:00:00.0")""" )
      parse( """("2014-01-13 00:00:00-1","2014-01-13 01:00:00-1")""" ) must_==( """("2014-01-13 00:00:00.0","2014-01-13 01:00:00.0")""" )
    }

  }

}
